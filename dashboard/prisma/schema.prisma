generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  projects     ProjectUser[]
  Form         Form[]
  FormResponse FormResponse[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      ProjectUser[]
  feedbacks  Feedback[]
  setting    ProjectSetting?
  domains    Domain[]
  Invitation Invitation[]
}

model ProjectUser {
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId  String
  userId     String
  role       String
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([projectId, userId])
}

model ProjectSetting {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @unique

  plan String?

  // Email
  emailEnabled Boolean @default(false)
  emailTitle   String?
  emailBody    String?

  // Slack
  slackEnabled  Boolean @default(false)
  slackWebhook  String?
  slackChannel  String?
  slackUserName String?
  slackIcon     String?
}

model Feedback {
  id         Int      @id @default(autoincrement())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  domain     Domain   @relation(fields: [domainId], references: [domain])
  domainId   String
  url        String
  email      String
  name       String?
  message    String
  screenshot String?
  metadata   String?
  isHide     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Domain {
  domain    String     @id @unique
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  feedbacks Feedback[]
}

model Invitation {
  id               String   @id @default(cuid())
  email            String   @unique
  status           String?
  error            String?
  invitedAt        DateTime @default(now())
  invitedToProject Project  @relation(fields: [projectId], references: [id])
  projectId        String

  @@unique([email, projectId])
}

model Form {
  id               String   @id @default(cuid())
  title            String
  content          String
  choices          String[]
  isMultipleChoice Boolean  @default(false)
  hasOtherChoice   Boolean  @default(false)

  authRequired Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  owner     User?          @relation(fields: [userId], references: [id])
  userId    String
  responses FormResponse[]
}

model FormChoiceScale {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  choices String[]
}

model FormResponse {
  id     Int    @id @default(autoincrement())
  form   Form   @relation(fields: [formId], references: [id])
  formId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  email String?
  name  String?

  response  String
  metadata  String?
  isHide    Boolean  @default(false)
  createdAt DateTime @default(now())
}
